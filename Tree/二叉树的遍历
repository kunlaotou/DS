//
// Created by 唐文华 on 2022/11/10.
//
#include <stdio.h>
#include <stdlib.h>
#define QueueMax 100
typedef char DataType;

//定义二叉树结点
typedef struct Node{
    DataType data;
    struct Node* leftChild, * rightChild;
}BiTreeNode, * BiTree;

//定义队列
typedef struct{
    BiTree data[QueueMax];
    int head;
    int rear;
    int len;
}Queue;

BiTree CreateTree();  //建立二叉树
Queue InitQueue();  //初始化队列
int IsEmptyQueue(Queue seq);  //队列判空
int IsFullQueue(Queue seq);   //队列判满
void PushQueue(Queue* seq, BiTree T);  //入队
void PopQueue(Queue* seq, BiTree* T);  //出队
void LevelOrder(BiTree T);  //层序遍历
void PreOrder(BiTreeNode* root, void visit(DataType item));//前序遍历
void InOrder(BiTreeNode* root, void visit(DataType item));//中序遍历
void PostOrder(BiTreeNode* root, void visit(DataType item));//后序遍历
void visit(DataType item);//访问函数
void BtreeTra(BiTreeNode *root, int deepth);   //等价中缀表达式
void BtreeToE(BiTree * root);

/*输入：   *+a##b##*c##-#d##
前序遍历:* + a b * c - d
中序遍历:a + b * c * - d
后序遍历:a b + c d - * *
层序遍历:* + * a b c - d
 */

/*输入：ABD#G###CE##F##
前序遍历：A B D G C E F
中序遍历：D G B A E C F
后序遍历：G D B E F C A
层序遍历：A B C D E F G
*/


int main(){
    BiTree T = CreateTree();
    printf("前序遍历:");
    PreOrder(T, visit);//前序遍历
    printf("\n中序遍历:");
    InOrder(T, visit);//中序遍历
    printf("\n后序遍历:");
    PostOrder(T, visit);//后序遍历
    printf("\n层序遍历:");
    LevelOrder(T);//层序遍历
    return 0;
}




void visit(DataType item){
    printf("%c ", item);
}

//建立二叉树
BiTree CreateTree(){
    char c;
    scanf("%c", &c);
    if (c == '#')  return NULL;
    BiTree T = (BiTree)malloc(sizeof(BiTreeNode));
    T->data = c;
    T->leftChild = CreateTree();
    T->rightChild = CreateTree();
    return T;
}

void PreOrder(BiTreeNode* root, void visit(DataType item)) {
    //前序遍历二叉树root，访问操作为visit
    if (root != NULL){
        visit(root->data);
        PreOrder(root->leftChild, visit);
        PreOrder(root->rightChild, visit);
    }
}

void InOrder(BiTreeNode* root, void visit(DataType item)) {
    //中序遍历二叉树root，访问操作为visit
    if (root != NULL){
        InOrder(root->leftChild, visit);
        visit(root->data);
        InOrder(root->rightChild, visit);
    }
}

void PostOrder(BiTreeNode* root, void visit(DataType item)) {
    //后序遍历二叉树root，访问操作为visit
    if (root != NULL){
        PostOrder(root->leftChild, visit);
        PostOrder(root->rightChild, visit);
        visit(root->data);
    }
}

//初始化队列
Queue InitQueue(){
    Queue seq;
    for (int i = 0; i < QueueMax; i++)
    {
        seq.data[i] = NULL;
    }
    seq.head = 0;
    seq.rear = -1;
    seq.len = 0;
    return seq;
}

//队列判空
int IsEmptyQueue(Queue seq){
    if (seq.len == 0)  return 1;
    return 0;
}

//队列判满
int IsFullQueue(Queue seq){
    if (seq.len == QueueMax)  return 1;
    return 0;
}

//入队
void PushQueue(Queue* seq, BiTree T){
    if (IsFullQueue(*seq)) {
        printf("队列已满\n");
        return;
    }
    seq->rear = (seq->rear + 1) % QueueMax;
    seq->len++;
    seq->data[seq->rear] = T;
}

//出队
void PopQueue(Queue* seq, BiTree* T){
    if (IsEmptyQueue(*seq)) {
        printf("队列已空\n");
        return;
    }
    seq->head = (seq->head + 1) % QueueMax;
    *T = seq->data[seq->head];
    seq->len--;
}

//层序遍历
void LevelOrder(BiTree T){
    Queue seq = InitQueue();
    BiTree tmp = T;
    PushQueue(&seq, tmp);
    while (!IsEmptyQueue(seq)){
        printf("%c ", tmp->data);
        if (tmp->leftChild != NULL){
            PushQueue(&seq, tmp->leftChild);
        }
        if (tmp->rightChild != NULL){
            PushQueue(&seq, tmp->rightChild);
        }
        PopQueue(&seq, &tmp);
    }
}
